// Copyright (C) 2023 The Qt Company Ltd.
// SPDX-License-Identifier: LicenseRef-Qt-Commercial OR GFDL-1.3-no-invariants-only

// **********************************************************************
// NOTE: the sections are not ordered by their logical order to avoid
// reshuffling the file each time the index order changes (i.e., often).
// Run the fixnavi.pl script to adjust the links to the index order.
// **********************************************************************

/*!
    \previouspage creator-getting-started.html
    \page creator-overview.html
    \nextpage creator-quick-tour.html

    \title IDE Overview

    \QC is an integrated development environment (IDE) that has tools for
    designing and developing applications with the Qt application framework.
    With Qt you can develop applications and user interfaces once and deploy
    them to several desktop, embedded, and mobile operating systems or
    web browsers (experimental). \QC has the tools for accomplishing your tasks
    throughout the whole application development life-cycle, from creating a
    project to deploying the application to the target platforms.

    \table
        \row
            \li \inlineimage front-projects.png
            \li \inlineimage front-ui.png
            \li \inlineimage front-coding.png
        \row
            \li \b {Managing Projects}

                To be able to build and run applications, \QC needs the same
                information as a compiler would need. It stores the information
                in the project settings.

                You can share projects with other designers and developers across
                different development platforms with a common tool for design,
                development, and debugging.

                \list
                    \li \l{Creating Projects}

                        To set up a project, you first have to decide what kind
                        of an application you want to develop: do you want a user
                        interface based on \l{User Interfaces}
                        {Qt Quick or Qt Widgets}. Second, you have to choose the
                        programming language to implement the application logic:
                        C++ or Python.
                    \li \l{Version Control Systems}

                        The recommended way to set up a project is to use a
                        version control system. Store and edit only project
                        source files and configuration files. Do not store
                        generated files.
                    \li \l{Configuring Projects}

                        Installation programs and project wizards create default
                        configurations for \QC and your projects. You can change
                        the configurations in the \uicontrol Projects mode.
                \endlist
                For more information, see \l{Manage Projects}
                {How To: Manage Projects}.
            \li \b {Designing User Interfaces}

                To create intuitive, modern-looking, fluid user interfaces, you
                can use \l{Qt Quick} and \l{Qt Design Studio Manual}{\QDS}:

                \list
                    \li \l {\QMLD}

                        Or, you can enable the \QMLD plugin to visually edit
                        \l{UI Files}{UI files} (.ui.qml).
                    \li \l {Converting UI Projects to Applications}

                        Qt Quick UI Prototype projects (.qmlproject) are useful
                        for creating user interfaces. To use them for application
                        development, you have to convert them to Qt Quick
                        Application projects that have project configuration
                        files (CMakeLists.txt or .pro), .cpp, and .qrc files.
                    \li \l {UI Files}

                        If you switch between \QC and \QDS or cooperate with
                        designers on a project, you might encounter .ui.qml files.
                        They are intended to be edited in \QDS only, so you need
                        to be careful not to break the code. To visually edit the
                        files in \QC, enable the \QMLD plugin.
                    \li \l{Using QML Modules with Plugins}

                        You can load C++ plugins for QML to simulate data.
                \endlist

                If you need a traditional user interface that has a clear
                structure and enforces a platform look and feel, use
                \l{Qt Widgets} and the integrated \l{\QD}.

                For more information, see
                \l{Design UIs}{How To: Design UIs}.
            \li \b {\l{Coding}}

                As an IDE, \QC differs from a text editor in that it knows how
                to build and run applications. It understands the C++ and QML
                languages as code, not just as plain text. Therefore, it can
                offer useful features, such as semantic highlighting,
                checking code syntax, code completion, and refactoring actions.
                \QC supports some of these services also for other programming
                languages, such as Python, for which a \e {language server} is
                available that provides information about the code to IDEs.

                For more information, see \l{Edit Code}{How To: Edit Code}.
        \row
            \li \inlineimage front-preview.png
            \li \inlineimage front-testing.png
            \li \inlineimage front-publishing.png
        \row
            \li \b {\l{Building and Running}}

                \QC integrates cross-platform systems for build
                automation: qmake, Qbs, CMake, and Autotools. In addition, you
                can import
                projects as \e {generic projects} and fully control the steps
                and commands used to build the project.

                You can build applications for, deploy them to, and run them on
                the desktop environment or a \l{glossary-device}{device}.
                \l{glossary-buildandrun-kit}{Kits}, build, run, and deployment
                settings allow you to quickly switch between different setups and
                target platforms.

                For more information, see \l{Build and Run}
                {How To: Build and Run}.
            \li \b {\l{Testing}}

                \QC integrates several external native debuggers that you can use
                to inspect the state of your application while debugging.

                Devices have limited memory and CPU power, so you should use them
                carefully. \QC integrates code analysis tools for detecting
                memory leaks, profiling function execution, analyzing CPU use,
                and eliminating unnecessary complexity of code. Other tools
                provide code coverage and visualize trace events.

                \QC integrates several testing frameworks for unit testing
                applications and libraries. You can use \QC to create, build,
                and run autotests.

                For more information, see \l{Testing}.
            \li \b {Publishing}

                \QC enables you to create installation packages for mobile
                devices that you can publish to application stores
                and other channels. You must make sure that the package contents
                meet the requirements for publishing on the channel.

                For more information, see \l{Publishing to Google Play}.
\endtable

*/
